import java.util.Scanner; // util 페키지의 Scanner 을 사용한다.
public class Arryrest {// class Arryrest 를 선언.
	public static void main(String[] args) {  // 메인 메소드 
		int e = 0;
		int h = 0;
		int[] ar; // 배열 사용 선언 : ar 이름의 배열을 생성한다. 
		 ar = new int[10];//ar 배열에 10의 방을 생성 인덱스 값은 0~9 
		for (int s = 0; s < ar.length; s++) {  // 배열 ar의 길이만큼 실행.
			ar[s] = (int) (Math.random() * 100) + 1;// 랜덤정수 생성 
			e += ar[s];//배열의 합
		}
		System.out.println("랜덤정수의 합:" + e);//배열의 합 e를 출력.
		for (int x = 0; x < ar.length; x++) {// 배열 ar의 길이만큼 실행.
			if (ar[x] < 20 || ar[x] > 90) {  // 배열에 저장된 값이 20보다 작거나 ||90 보다 클경우 둘중 하나를 만족한경우 참, ||= or 연산자.
				h += ar[x];//조건문을 제외한 배열의 합
			}
		}
		System.out.println("랜덤정수의 합 에서 조건 을뺀 합:" + h); 
		System.out.println("배열에 저장된 값");
		for (int d = 0; d < ar.length; d++) {
			System.out.println(ar[d]);//각 배열에 저장된 배열값 출력
		}
		int max = ar[0];//최대값 저장 변수
		int min = ar[0];//최소값 저장 변수 
		int sd = 0;// 합을 저장하기위한 변수 
		for (int x = 0; x < ar.length; x++) { // 배열 ar의 길이만큼 실행.
			sd += ar[x]; //배열의 합
			if (max < ar[x]) { //배열의 최대값 판별
				max = ar[x];//배열의 최대값
			} else if (min > ar[x]) {//배열의 최소값 판별
				min = ar[x];// 배열의 최소값 저장 
			}
		}
		System.out.println("최대값은:" + max + "최소값" + min + "평균:" + (sd / ar.length));
        // 최대.최소.평균 출력 
		for(int ab=0; ab<=5;ab++){ // ab값이 5보다 작거나 같을 때까지 실행 //행
			for(int ac=0; ac<ab; ac++){// ac 값이 ab 값보다 작을때 까지.  
				System.out.print("*");  // "*"을 출력 한다.
			}
			System.out.println();// 줄바꿈 실행.
		}
		int gg=0;
	    for(int xx=0; xx<10;xx++){
	    	
	    	gg+=xx; // gg=gg+xx 연산 의 축약식 
	    	continue;  // 건너뛰고 조건문으로 다시 올라간다.
	    }
	    System.out.println(gg);
	    Scanner cc=new Scanner(System.in);// 스케너 변수 선언 
	    System.out.println("정지 조건은 ==0");//정지조건은 0
	    int k=cc.nextInt();// 입력값은 정수형 k에 저장한다. 
	    int dd=0;
	    int df=0;
	    while(true){ //while 을 무한 루프돌린다. 
	    	df++;// 선위 연산자. : 값을 먼저 사용후 연산한다.
	    	df+=dd; //df=df+dd 의 축약식
	    	if(k==0){ //if문 에서 k에 저장된 값이 0과 동일한지를 판별  
	    		break;// 저장값이 0과 같으면 루프문을 빠져나간다. 
	    	}
	    }
	    System.out.println("df="+df);
	    Outter:// 레이드 , goto문 대신쓰이는 함수. : Outter 아래에 존재하는 문장 전제를 넘어간다. ex: 반복문이라면 {~}사이의 문장을 건너뛴다.
	    while(true){//while 을 무한 루프돌린다.    // 중첩반복문.
	    	 while(true){//while 을 무한 루프돌린다.    // 중첩반복문.
	    		int vc=0;;
	    		vc++;// 선위 연산자. : 값을 먼저 사용후 연산한다.
			        System.out.println("vc"+vc);
			        break Outter;  // 반복문에서 빠져나간다. 
	    }
	    	
		    	
	    }
	   
	}
}
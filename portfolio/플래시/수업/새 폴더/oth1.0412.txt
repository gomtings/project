oth.1 
-----------------------------
view.cpp
---------------------

// oth1View.cpp : Coth1View 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "oth1.h"
#endif

#include "oth1Doc.h"
#include "oth1View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// Coth1View

IMPLEMENT_DYNCREATE(Coth1View, CView)

BEGIN_MESSAGE_MAP(Coth1View, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &Coth1View::OnFilePrintPreview)
	ON_WM_CONTEXTMENU()
	ON_WM_RBUTTONUP()
	ON_WM_LBUTTONDOWN()
END_MESSAGE_MAP()

// Coth1View 생성/소멸

Coth1View::Coth1View()
{
	// TODO: 여기에 생성 코드를 추가합니다.

	for(int i=0; i<15; i++)  //중복실행방지
		for(int j=0; j<15; j++)
			Block[i][j]=2;
	Q=0; //최초의 검은색Q-0 검은색,1=회색 출력 2=흰색 
}

Coth1View::~Coth1View()
{
}

BOOL Coth1View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// Coth1View 그리기

void Coth1View::OnDraw(CDC* pDC)
{
	Coth1Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
	for (int y=0 ; y<=15*30; y=y+30) //세로 격자그리기 
	{
		pDC->MoveTo(0,y);
		pDC->LineTo(15*30,y);
	}
	for (int x=0 ; x<=15*30; x=x+30) //가로 격자그리기
	{
		pDC->MoveTo(x,0);
		pDC->LineTo(x,15*30);
	}
}


// Coth1View 인쇄


void Coth1View::OnFilePrintPreview()
{
#ifndef SHARED_HANDLERS
	AFXPrintPreview(this);
#endif
}

BOOL Coth1View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void Coth1View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void Coth1View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}

void Coth1View::OnRButtonUp(UINT /* nFlags */, CPoint point)
{
	ClientToScreen(&point);
	OnContextMenu(this, point);
}

void Coth1View::OnContextMenu(CWnd* /* pWnd */, CPoint point)
{
#ifndef SHARED_HANDLERS
	theApp.GetContextMenuManager()->ShowPopupMenu(IDR_POPUP_EDIT, point.x, point.y, this, TRUE);
#endif
}


// Coth1View 진단

#ifdef _DEBUG
void Coth1View::AssertValid() const
{
	CView::AssertValid();
}

void Coth1View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

Coth1Doc* Coth1View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(Coth1Doc)));
	return (Coth1Doc*)m_pDocument;
}
#endif //_DEBUG


// Coth1View 메시지 처리기


void Coth1View::OnLButtonDown(UINT nFlags, CPoint point)//클레스뷰->메시지->LButtonDown 추가
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.

	if(point.x <15*30 && point.y <15*30)  //클릭 좌표그리기..
	{
		int x = point.x/30;
		int y = point.y/30;
		CPoint p;
		p.x=x,p.y=y;
		blkdraw(p);
		if(Q==0) Q=1;
		else Q=0;
		//CClientDC dc(this);
		//CString text;
		//text.Format(_T("%d , %d "),x,y);
		//dc.TextOutW(x*30, y*30+7, text);
	}
	CView::OnLButtonDown(nFlags, point);

}

//위치 CPoint pos 에 Q에 따라 다른색의 블록 출력 함수 
void Coth1View::blkdraw(CPoint pos)
{
	if(Block[pos.x][pos.y]==2)
	{
	CBrush br , *old;
	RECT rect = {pos.x*30, pos.y*30, pos.x*30+29,pos.y*30+29}; // 처음 부터 시작점 좌표2개 끝점좌표2개 
	CClientDC dc(this);
	int Col = Q*127; //0=검은색 127=회색 254=흰색
	br.CreateSolidBrush(RGB(Col,Col,Col));
	old=(CBrush *) dc.SelectObject(&br);
	dc.FillRect(&rect, &br); //rect를 br로 채워라.
	dc.SelectObject(old);
	Block[pos.x][pos.y]=1; //중복실행방지
   }
}


---------------------------
view.h
------------------
public:
	int Q ; //Q-0 검은색,1=회색 출력 
	void blkdraw(CPoint pos);//위치 CPoint pos 에 Q에 따라 다른색의 블록 출력 함수 
	int Block[15][15];
// 재정의입니다.
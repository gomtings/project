ex1
MFC 응용프로그램


// ex1View.cpp : Cex1View 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "ex1.h"
#endif

#include "ex1Doc.h"
#include "ex1View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// Cex1View

IMPLEMENT_DYNCREATE(Cex1View, CView)

BEGIN_MESSAGE_MAP(Cex1View, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &Cex1View::OnFilePrintPreview)
	ON_WM_CONTEXTMENU()
	ON_WM_RBUTTONUP()
END_MESSAGE_MAP()

// Cex1View 생성/소멸

Cex1View::Cex1View()
{
	// TODO: 여기에 생성 코드를 추가합니다.

}

Cex1View::~Cex1View()
{
}

BOOL Cex1View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// Cex1View 그리기

void Cex1View::OnDraw(CDC* pDC)//여기서부터 추가
{
	Cex1Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
	CString text;
		int a=150;
		text="대한민국";
	pDC->TextOutW(30,30,_T("우리나라"));
	pDC->TextOutW(30,50,text);
	text.Format(_T("%d"),a );
	pDC->TextOutW(30,70,text);//수정끝
}


// Cex1View 인쇄


void Cex1View::OnFilePrintPreview()
{
#ifndef SHARED_HANDLERS
	AFXPrintPreview(this);
#endif
}

BOOL Cex1View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void Cex1View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void Cex1View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}

void Cex1View::OnRButtonUp(UINT /* nFlags */, CPoint point)
{
	ClientToScreen(&point);
	OnContextMenu(this, point);
}

void Cex1View::OnContextMenu(CWnd* /* pWnd */, CPoint point)
{
#ifndef SHARED_HANDLERS
	theApp.GetContextMenuManager()->ShowPopupMenu(IDR_POPUP_EDIT, point.x, point.y, this, TRUE);
#endif
}


// Cex1View 진단

#ifdef _DEBUG
void Cex1View::AssertValid() const
{
	CView::AssertValid();
}

void Cex1View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

Cex1Doc* Cex1View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(Cex1Doc)));
	return (Cex1Doc*)m_pDocument;
}
#endif //_DEBUG


// Cex1View 메시지 처리기



----------------------



// ex2View.cpp : Cex2View 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "ex2.h"
#endif

#include "ex2Doc.h"
#include "ex2View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// Cex2View

IMPLEMENT_DYNCREATE(Cex2View, CView)

BEGIN_MESSAGE_MAP(Cex2View, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &Cex2View::OnFilePrintPreview)
	ON_WM_CONTEXTMENU()
	ON_WM_RBUTTONUP()
	ON_WM_LBUTTONDOWN()
END_MESSAGE_MAP()

// Cex2View 생성/소멸

Cex2View::Cex2View()
{
	// TODO: 여기에 생성 코드를 추가합니다.

}

Cex2View::~Cex2View()
{
}

BOOL Cex2View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// Cex2View 그리기

void Cex2View::OnDraw(CDC* /*pDC*/)
{
	Cex2Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
}


// Cex2View 인쇄


void Cex2View::OnFilePrintPreview()
{
#ifndef SHARED_HANDLERS
	AFXPrintPreview(this);
#endif
}

BOOL Cex2View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void Cex2View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void Cex2View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}

void Cex2View::OnRButtonUp(UINT /* nFlags */, CPoint point)
{
	ClientToScreen(&point);
	OnContextMenu(this, point);
}

void Cex2View::OnContextMenu(CWnd* /* pWnd */, CPoint point)
{
#ifndef SHARED_HANDLERS
	theApp.GetContextMenuManager()->ShowPopupMenu(IDR_POPUP_EDIT, point.x, point.y, this, TRUE);
#endif
}


// Cex2View 진단

#ifdef _DEBUG
void Cex2View::AssertValid() const
{
	CView::AssertValid();
}

void Cex2View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

Cex2Doc* Cex2View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(Cex2Doc)));
	return (Cex2Doc*)m_pDocument;
}
#endif //_DEBUG


// Cex2View 메시지 처리기


void Cex2View::OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	CString text;
	text.Format(_T(" x = %d , y = %d "), point.x , point.y);
		CClientDC dc(this);
	dc.TextOutW(20,20, text);
	dc.MoveTo( point.x-5 , point.y-5);
	dc.LineTo( point.x+5 , point.y+5 );
	dc.MoveTo( point.x-5 , point.y+5);
	dc.LineTo( point.x+5 , point.y-5 );
	CView::OnLButtonDown(nFlags, point);
}

-------------------------------------



// ex3View.cpp : Cex3View 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "ex3.h"
#endif

#include "ex3Doc.h"
#include "ex3View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// Cex3View

IMPLEMENT_DYNCREATE(Cex3View, CView)

BEGIN_MESSAGE_MAP(Cex3View, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &Cex3View::OnFilePrintPreview)
	ON_WM_CONTEXTMENU()
	ON_WM_RBUTTONUP()
	ON_WM_KEYDOWN()
END_MESSAGE_MAP()

// Cex3View 생성/소멸

Cex3View::Cex3View()
{
	// TODO: 여기에 생성 코드를 추가합니다.
	TEXT.Empty();
}

Cex3View::~Cex3View()
{
}

BOOL Cex3View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// Cex3View 그리기

void Cex3View::OnDraw(CDC* /*pDC*/)
{
	Cex3Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
}


// Cex3View 인쇄


void Cex3View::OnFilePrintPreview()
{
#ifndef SHARED_HANDLERS
	AFXPrintPreview(this);
#endif
}

BOOL Cex3View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void Cex3View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void Cex3View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}

void Cex3View::OnRButtonUp(UINT /* nFlags */, CPoint point)
{
	ClientToScreen(&point);
	OnContextMenu(this, point);
}

void Cex3View::OnContextMenu(CWnd* /* pWnd */, CPoint point)
{
#ifndef SHARED_HANDLERS
	theApp.GetContextMenuManager()->ShowPopupMenu(IDR_POPUP_EDIT, point.x, point.y, this, TRUE);
#endif
}


// Cex3View 진단

#ifdef _DEBUG
void Cex3View::AssertValid() const
{
	CView::AssertValid();
}

void Cex3View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

Cex3Doc* Cex3View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(Cex3Doc)));
	return (Cex3Doc*)m_pDocument;
}
#endif //_DEBUG


// Cex3View 메시지 처리기

/*void Cex3View::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlage)
{
	//TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.,
	CString text;
	text.Format(_T("%c"), nChar);
	TEXT = TEXT+text; //TEXT 의 최초값을 지워야 한다. 생성.소멸
	CClientDC dc(this);
	text.Format(_T("%d"), VAL);//입력 숫자 값을 문자열로 
	dc.TextOutW(20,20,TEXT);  //입력 문자열
	dc.TextOutW(20,40,text);   // 숫자를 무자로 바꾼 값
	CView::OnKeyDown(nChar, nRepCnt, nFlags);
}
*/

void Cex3View::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	CString text;
	text.Format(_T("%c"), nChar);
	TEXT = TEXT+text; //TEXT 의 최초값을 지워야 한다. 생성.소멸
	VAL=_tstoi(TEXT);
	CClientDC dc(this);
	text.Format(_T("%d"), VAL);//입력 숫자 값을 문자열로 
	dc.TextOutW(20,20,TEXT);  //입력 문자열
	dc.TextOutW(20,40,text);   // 숫자를 무자로 바꾼 값
	CView::OnKeyDown(nChar, nRepCnt, nFlags);
}
-----------------------------
ex3view.h
// 작업입니다.
public:
	CString TEXT; //키보드 문자열을 저장할 변수
	int VAL;
// 재정의입니다.